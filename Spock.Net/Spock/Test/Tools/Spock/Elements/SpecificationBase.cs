// <copyright file="SpecificationBase.cs" company="Erratic Motion Ltd">
// Copyright (c) Erratic Motion Ltd. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>

namespace ErraticMotion.Test.Tools.Spock.Elements
{
    using System.Collections.Generic;
    using System.Linq;
    using Gherkin.Annotations;

    internal abstract class SpecificationBase : IFixtureMethodSteps
    {
        private readonly List<string> comments = new List<string>();
        private readonly IFixtureInvariants fixtureInvariants;

        protected readonly ISpockOptions Options;

        protected SpecificationBase(ISpockOptions options, IFixtureInvariants fixtureInvariants)
        {
            this.Options = options;
            this.fixtureInvariants = fixtureInvariants;
        }

        public IEnumerable<string> Comments => this.comments;

        public IFixtureStep Given { get; private set; }

        public bool HasGiven { get; private set; }

        public IFixtureStep When { get; private set; }

        public bool HasWhen { get; private set; }

        public IFixtureStep Then { get; private set; }

        public bool HasThen { get; private set; }

        public void AddComments(IEnumerable<string> item)
        {
            this.comments.AddRange(item);
        }

        public ISpockElements<string> XmlComments()
        {
            var builder = new SpockCollectionString();
            if (this.Comments.Any())
            {
                foreach (var comment in this.Comments)
                {
                    builder.AppendLine(comment);
                }
            }

            return builder;
        }

        public void Add(IFixtureStep item)
        {
            if (item == null)
            {
                return;
            }

            if (item.GherkinAttribute == typeof(GivenAttribute))
            {
                this.Given = item;
                this.HasGiven = true;
            }
            else if (item.GherkinAttribute == typeof(WhenAttribute))
            {
                this.When = item;
                this.HasWhen = true;
            }
            else
            {
                this.Then = item;
                this.HasThen = true;
            }
        }

        public ISpockElements<string> GherkinAttribtes()
        {
            var builder = new SpockCollectionString();
            if (this.HasGiven)
            {
                builder.Append(this.Given);
            }

            if (this.HasWhen)
            {
                builder.Append(this.When);
            }

            if (this.HasThen)
            {
                builder.Append(this.Then);
            }

            return builder;
        }

        public ISpockElements<string> Header()
        {
            var builder = new SpockCollectionString();
            builder.AppendLine(@"// <copyright file=""{0}.cs"" company=""Erratic Motion Ltd"">", this.fixtureInvariants.FixtureName.Split('.')[0]);
            builder.AppendLine(@"// Copyright (c) Erratic Motion Ltd. All rights reserved.");
            builder.AppendLine(@"// Licensed under the MIT license. See LICENSE file in the project root for full license information.");
            builder.AppendLine(@"// </copyright>");
            builder.AppendLine();
            builder.AppendLine(@"//----------------------------------------------------------------------------");
            builder.AppendLine(@"// <auto-generated>");
            builder.AppendLine(@"//     This code was generated by a tool.");
            builder.AppendLine(@"//");
            builder.AppendLine(@"//     Changes to this file may cause incorrect behaviour and will be lost if");
            builder.AppendLine(@"//     the code is regenerated.");
            builder.AppendLine(@"// </auto-generated>");
            builder.AppendLine(@"//----------------------------------------------------------------------------");
            builder.AppendLine();
            builder.AppendLine(
                @"// spock -t:{0} -n:{1} -f:{2}.feature",
                this.Options.TestRunner,
                this.fixtureInvariants.Namespace,
                this.fixtureInvariants.FixtureName);

            builder.AppendLine();

            return builder;
        }
    }
}
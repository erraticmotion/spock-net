// <copyright file="LiteralByteExtensions.cs" company="Erratic Motion Ltd">
// Copyright (c) Erratic Motion Ltd. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ErraticMotion.Test.Tools
{
    using System;
    using System.IO;

    /// <summary>
    /// Contains extension methods for the <see cref="byte" /> type.
    /// </summary>
    public static class LiteralByteExtensions
    {
        /// <summary>
        /// Converts a byte to a string representation.
        /// </summary>
        /// <param name="item">The byte value to convert to a string representation.</param>
        /// <returns>A string representation of the byte value.</returns>
        public static string FromLiteralByte(this byte item)
        {
            return item.ToString("X2");
        }

		/// <summary>
        /// Converts a byte to a string representation.
        /// </summary>
        /// <param name="item">The byte value to convert to a string representation.</param>
        /// <param name="prefix">The prefix to add to the front of the string representation.</param>
        /// <returns>A string representation of the byte value.</returns>
        public static string FromLiteralByte(this byte item, string prefix)
        {
            return prefix + item.FromLiteralByte();
        }
        
        /// <summary>
        /// Converts the string to a literal byte array.
        /// </summary>
        /// <param name="item">The string to convert.</param>
        /// <returns>A byte array value of the string value.</returns>
        /// <exception cref="ArgumentNullException">The item was null.</exception>
        /// <exception cref="ArgumentOutOfRangeException">The string must be even in length.</exception>
        public static byte[] ToLiteralBytes(this string item) 
        {
            if (string.IsNullOrEmpty(item)) 
            {
                throw new ArgumentNullException(nameof(item));
            }

            if (item.Length.IsOdd()) 
            {
                throw new ArgumentOutOfRangeException(nameof(item), "Can only convert to literal byte array an even numbered string");
            }

            var ca = item.ToCharArray();
            var stream = new MemoryStream();
            ca.ForIndex((i, c) => 
            {
                if ((i & 1) == 1) 
                {
                    var b = new string(new[] { ca[i - 1], c }).ToLiteralByte();
                    stream.WriteByte(b);
                }
            });

            return stream.ToArray();
        }
        
        /// <summary>
        /// Converts a string to its literal byte value.
        /// </summary>
        /// <param name="item">The string to convert.</param>
        /// <returns>A byte value.</returns>
        /// <exception cref="ArgumentOutOfRangeException">The string must be 2 characters in length.</exception>
        public static byte ToLiteralByte(this string item) 
        {
            if (string.IsNullOrEmpty(item)) 
            {
                return 0x00;
            }
            
            if (item.Length != 2) 
            {
                throw new ArgumentOutOfRangeException(nameof(item), "item length was not 2.");
            }
            
            switch (item) 
            {
				case "00":
					return 0x00;
				case "01":
					return 0x01;
				case "02":
					return 0x02;
				case "03":
					return 0x03;
				case "04":
					return 0x04;
				case "05":
					return 0x05;
				case "06":
					return 0x06;
				case "07":
					return 0x07;
				case "08":
					return 0x08;
				case "09":
					return 0x09;
				case "0A":
					return 0x0A;
				case "0B":
					return 0x0B;
				case "0C":
					return 0x0C;
				case "0D":
					return 0x0D;
				case "0E":
					return 0x0E;
				case "0F":
					return 0x0F;
				case "10":
					return 0x10;
				case "11":
					return 0x11;
				case "12":
					return 0x12;
				case "13":
					return 0x13;
				case "14":
					return 0x14;
				case "15":
					return 0x15;
				case "16":
					return 0x16;
				case "17":
					return 0x17;
				case "18":
					return 0x18;
				case "19":
					return 0x19;
				case "1A":
					return 0x1A;
				case "1B":
					return 0x1B;
				case "1C":
					return 0x1C;
				case "1D":
					return 0x1D;
				case "1E":
					return 0x1E;
				case "1F":
					return 0x1F;
				case "20":
					return 0x20;
				case "21":
					return 0x21;
				case "22":
					return 0x22;
				case "23":
					return 0x23;
				case "24":
					return 0x24;
				case "25":
					return 0x25;
				case "26":
					return 0x26;
				case "27":
					return 0x27;
				case "28":
					return 0x28;
				case "29":
					return 0x29;
				case "2A":
					return 0x2A;
				case "2B":
					return 0x2B;
				case "2C":
					return 0x2C;
				case "2D":
					return 0x2D;
				case "2E":
					return 0x2E;
				case "2F":
					return 0x2F;
				case "30":
					return 0x30;
				case "31":
					return 0x31;
				case "32":
					return 0x32;
				case "33":
					return 0x33;
				case "34":
					return 0x34;
				case "35":
					return 0x35;
				case "36":
					return 0x36;
				case "37":
					return 0x37;
				case "38":
					return 0x38;
				case "39":
					return 0x39;
				case "3A":
					return 0x3A;
				case "3B":
					return 0x3B;
				case "3C":
					return 0x3C;
				case "3D":
					return 0x3D;
				case "3E":
					return 0x3E;
				case "3F":
					return 0x3F;
				case "40":
					return 0x40;
				case "41":
					return 0x41;
				case "42":
					return 0x42;
				case "43":
					return 0x43;
				case "44":
					return 0x44;
				case "45":
					return 0x45;
				case "46":
					return 0x46;
				case "47":
					return 0x47;
				case "48":
					return 0x48;
				case "49":
					return 0x49;
				case "4A":
					return 0x4A;
				case "4B":
					return 0x4B;
				case "4C":
					return 0x4C;
				case "4D":
					return 0x4D;
				case "4E":
					return 0x4E;
				case "4F":
					return 0x4F;
				case "50":
					return 0x50;
				case "51":
					return 0x51;
				case "52":
					return 0x52;
				case "53":
					return 0x53;
				case "54":
					return 0x54;
				case "55":
					return 0x55;
				case "56":
					return 0x56;
				case "57":
					return 0x57;
				case "58":
					return 0x58;
				case "59":
					return 0x59;
				case "5A":
					return 0x5A;
				case "5B":
					return 0x5B;
				case "5C":
					return 0x5C;
				case "5D":
					return 0x5D;
				case "5E":
					return 0x5E;
				case "5F":
					return 0x5F;
				case "60":
					return 0x60;
				case "61":
					return 0x61;
				case "62":
					return 0x62;
				case "63":
					return 0x63;
				case "64":
					return 0x64;
				case "65":
					return 0x65;
				case "66":
					return 0x66;
				case "67":
					return 0x67;
				case "68":
					return 0x68;
				case "69":
					return 0x69;
				case "6A":
					return 0x6A;
				case "6B":
					return 0x6B;
				case "6C":
					return 0x6C;
				case "6D":
					return 0x6D;
				case "6E":
					return 0x6E;
				case "6F":
					return 0x6F;
				case "70":
					return 0x70;
				case "71":
					return 0x71;
				case "72":
					return 0x72;
				case "73":
					return 0x73;
				case "74":
					return 0x74;
				case "75":
					return 0x75;
				case "76":
					return 0x76;
				case "77":
					return 0x77;
				case "78":
					return 0x78;
				case "79":
					return 0x79;
				case "7A":
					return 0x7A;
				case "7B":
					return 0x7B;
				case "7C":
					return 0x7C;
				case "7D":
					return 0x7D;
				case "7E":
					return 0x7E;
				case "7F":
					return 0x7F;
				case "80":
					return 0x80;
				case "81":
					return 0x81;
				case "82":
					return 0x82;
				case "83":
					return 0x83;
				case "84":
					return 0x84;
				case "85":
					return 0x85;
				case "86":
					return 0x86;
				case "87":
					return 0x87;
				case "88":
					return 0x88;
				case "89":
					return 0x89;
				case "8A":
					return 0x8A;
				case "8B":
					return 0x8B;
				case "8C":
					return 0x8C;
				case "8D":
					return 0x8D;
				case "8E":
					return 0x8E;
				case "8F":
					return 0x8F;
				case "90":
					return 0x90;
				case "91":
					return 0x91;
				case "92":
					return 0x92;
				case "93":
					return 0x93;
				case "94":
					return 0x94;
				case "95":
					return 0x95;
				case "96":
					return 0x96;
				case "97":
					return 0x97;
				case "98":
					return 0x98;
				case "99":
					return 0x99;
				case "9A":
					return 0x9A;
				case "9B":
					return 0x9B;
				case "9C":
					return 0x9C;
				case "9D":
					return 0x9D;
				case "9E":
					return 0x9E;
				case "9F":
					return 0x9F;
				case "A0":
					return 0xA0;
				case "A1":
					return 0xA1;
				case "A2":
					return 0xA2;
				case "A3":
					return 0xA3;
				case "A4":
					return 0xA4;
				case "A5":
					return 0xA5;
				case "A6":
					return 0xA6;
				case "A7":
					return 0xA7;
				case "A8":
					return 0xA8;
				case "A9":
					return 0xA9;
				case "AA":
					return 0xAA;
				case "AB":
					return 0xAB;
				case "AC":
					return 0xAC;
				case "AD":
					return 0xAD;
				case "AE":
					return 0xAE;
				case "AF":
					return 0xAF;
				case "B0":
					return 0xB0;
				case "B1":
					return 0xB1;
				case "B2":
					return 0xB2;
				case "B3":
					return 0xB3;
				case "B4":
					return 0xB4;
				case "B5":
					return 0xB5;
				case "B6":
					return 0xB6;
				case "B7":
					return 0xB7;
				case "B8":
					return 0xB8;
				case "B9":
					return 0xB9;
				case "BA":
					return 0xBA;
				case "BB":
					return 0xBB;
				case "BC":
					return 0xBC;
				case "BD":
					return 0xBD;
				case "BE":
					return 0xBE;
				case "BF":
					return 0xBF;
				case "C0":
					return 0xC0;
				case "C1":
					return 0xC1;
				case "C2":
					return 0xC2;
				case "C3":
					return 0xC3;
				case "C4":
					return 0xC4;
				case "C5":
					return 0xC5;
				case "C6":
					return 0xC6;
				case "C7":
					return 0xC7;
				case "C8":
					return 0xC8;
				case "C9":
					return 0xC9;
				case "CA":
					return 0xCA;
				case "CB":
					return 0xCB;
				case "CC":
					return 0xCC;
				case "CD":
					return 0xCD;
				case "CE":
					return 0xCE;
				case "CF":
					return 0xCF;
				case "D0":
					return 0xD0;
				case "D1":
					return 0xD1;
				case "D2":
					return 0xD2;
				case "D3":
					return 0xD3;
				case "D4":
					return 0xD4;
				case "D5":
					return 0xD5;
				case "D6":
					return 0xD6;
				case "D7":
					return 0xD7;
				case "D8":
					return 0xD8;
				case "D9":
					return 0xD9;
				case "DA":
					return 0xDA;
				case "DB":
					return 0xDB;
				case "DC":
					return 0xDC;
				case "DD":
					return 0xDD;
				case "DE":
					return 0xDE;
				case "DF":
					return 0xDF;
				case "E0":
					return 0xE0;
				case "E1":
					return 0xE1;
				case "E2":
					return 0xE2;
				case "E3":
					return 0xE3;
				case "E4":
					return 0xE4;
				case "E5":
					return 0xE5;
				case "E6":
					return 0xE6;
				case "E7":
					return 0xE7;
				case "E8":
					return 0xE8;
				case "E9":
					return 0xE9;
				case "EA":
					return 0xEA;
				case "EB":
					return 0xEB;
				case "EC":
					return 0xEC;
				case "ED":
					return 0xED;
				case "EE":
					return 0xEE;
				case "EF":
					return 0xEF;
				case "F0":
					return 0xF0;
				case "F1":
					return 0xF1;
				case "F2":
					return 0xF2;
				case "F3":
					return 0xF3;
				case "F4":
					return 0xF4;
				case "F5":
					return 0xF5;
				case "F6":
					return 0xF6;
				case "F7":
					return 0xF7;
				case "F8":
					return 0xF8;
				case "F9":
					return 0xF9;
				case "FA":
					return 0xFA;
				case "FB":
					return 0xFB;
				case "FC":
					return 0xFC;
				case "FD":
					return 0xFD;
				case "FE":
					return 0xFE;
				case "FF":
					return 0xFF;
                default:
                    throw new ArgumentOutOfRangeException("item", "item value cannot be greater than 255.");
            }
        }
    }
}
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <copyright file="LiteralByteExtensions.cs" company="Erratic Motion Ltd">
// Copyright (c) Erratic Motion Ltd. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ErraticMotion.Test.Tools
{
    using System;
    using System.IO;

    /// <summary>
    /// Contains extension methods for the <see cref="byte" /> type.
    /// </summary>
    public static class LiteralByteExtensions
    {
        /// <summary>
        /// Converts a byte to a string representation.
        /// </summary>
        /// <param name="item">The byte value to convert to a string representation.</param>
        /// <returns>A string representation of the byte value.</returns>
        public static string FromLiteralByte(this byte item)
        {
            return item.ToString("X2");
        }

		/// <summary>
        /// Converts a byte to a string representation.
        /// </summary>
        /// <param name="item">The byte value to convert to a string representation.</param>
        /// <param name="prefix">The prefix to add to the front of the string representation.</param>
        /// <returns>A string representation of the byte value.</returns>
        public static string FromLiteralByte(this byte item, string prefix)
        {
            return prefix + item.FromLiteralByte();
        }
        
        /// <summary>
        /// Converts the string to a literal byte array.
        /// </summary>
        /// <param name="item">The string to convert.</param>
        /// <returns>A byte array value of the string value.</returns>
        /// <exception cref="ArgumentNullException">The item was null.</exception>
        /// <exception cref="ArgumentOutOfRangeException">The string must be even in length.</exception>
        public static byte[] ToLiteralBytes(this string item) 
        {
            if (string.IsNullOrEmpty(item)) 
            {
                throw new ArgumentNullException(nameof(item));
            }

            if (item.Length.IsOdd()) 
            {
                throw new ArgumentOutOfRangeException(nameof(item), "Can only convert to literal byte array an even numbered string");
            }

            var ca = item.ToCharArray();
            var stream = new MemoryStream();
            ca.ForIndex((i, c) => 
            {
                if ((i & 1) == 1) 
                {
                    var b = new string(new[] { ca[i - 1], c }).ToLiteralByte();
                    stream.WriteByte(b);
                }
            });

            return stream.ToArray();
        }
        
        /// <summary>
        /// Converts a string to its literal byte value.
        /// </summary>
        /// <param name="item">The string to convert.</param>
        /// <returns>A byte value.</returns>
        /// <exception cref="ArgumentOutOfRangeException">The string must be 2 characters in length.</exception>
        public static byte ToLiteralByte(this string item) 
        {
            if (string.IsNullOrEmpty(item)) 
            {
                return 0x00;
            }
            
            if (item.Length != 2) 
            {
                throw new ArgumentOutOfRangeException(nameof(item), "item length was not 2.");
            }
            
            switch (item) 
            {
<#
                this.PushIndent("\t\t\t\t");
                for(int i = 0; i < 256; i++) {
                    this.WriteLine("case \"{0}\":", ((byte)i).ToString("X2"));
                    this.PushIndent("\t");
                    this.WriteLine("return 0x{0, 00};", ((byte)i).ToString("X2"));
                    this.PopIndent();
                };
                this.PopIndent();
#>
                default:
                    throw new ArgumentOutOfRangeException("item", "item value cannot be greater than 255.");
            }
        }
    }
}